1.React 是一个重运行时的框架，那在数据发生了变化之后，它并没有去直接操作【dom】而是生成了一个所谓的【虚拟dom】，帮助我们解决跨平台和兼容性的问题

2.期间会通过diff算法，算出最小的操作行为，这些都是运行时来做的

3.react本身的思路是纯JS的写法，这种方式非常灵活。但谁这也让它在编译时很难做太多的事。比如说vue的优化策略（见【2.什么是编译时优化】）。

4.所以我们看到react几个大的版本的优化主要都是【死磕运行时】


#死磕运行时关注的问题

【CPU问题】
1.浏览器刷新频率一般是60hz，每秒刷新60次，大概16ms一次。
2.由于我们的浏览器的GUI渲染线程和JS线程是互斥的，所以JS脚本和浏览器的布局绘制不能同时进行。那么在这16ms的时间里，浏览器既要完成JS的执行，也要完成样式的重排和重绘。如果JS执行时间过长超出了16ms，那这次刷新就没有时间去执行样式布局和绘制了，页面表现为卡顿。

【IO问题】
1.比如说我们很多的组件都要去等待一些网络延迟
2.怎么才能在这个网络延迟存在的情况下，减少用户对这个网络延迟的感知，这个是我们需要解决的问题

						CPU										IO
									a frame ≈ 16ms
						    【Javascript】 【Style】 【Layout】 ...
							
							        a frame ≈ 16ms
						    【Javascript】 【Style】 【Layout】 ...


图解React源码：https://github.com/7kms/react-illustration-series
React 技术揭秘：https://react.iamkasong.com/