1.生命周期的概念
	1)生命周期不是一个计算机概念，是一个广泛的概念
	2)通俗解释为 “从摇篮到坟墓”（Cradle-to-Grave）—— 百度百科
	3)所有的事物都有生命周期，重点在于观察和分析
	4)程序里面的生命周期往往是描述某对象、程序或者服务从开始到结束的过程的关键节点

2.生命周期函数的概念
	1)能“挂在”生命周期各个重要节点上的函数，在其他语言和系统中也会称他为“钩子函数(Hook)”
	2)其本质就是在对象、程序或者服务已有流程中节点中插入用户自定义的逻辑。

3.React 组件的生命周期
	Q.React 组件为什么有生命周期?
	A.生命周期是一个事物存在的必然规律，React 的生命周是描述了一个 React 从初始化、挂载、更新和销毁这些关键节点。

	Q.为什么 React 组件会有设计生命周期函数?
	A.React 组件需要让使用者能够根据这些生命周期的关键节点时自定义组件的逻辑来实现更复杂的功能。

4.React Hooks 组件生命周期
	自己造了两个概念：

	1)帧（Frame）—— React Hooks 组件函数执行一次所产生的所有环境（这个词来从动画借用），一个帧固定下来就不会改变（这是为什么 Hooks 组件函数的直接闭包里面都只用 const）。当新的帧生成了以后，旧的帧会被丢弃。
	2)迭代（Iteration ）—— 会使 React Hooks 组件函数重新执行，并且进入下一帧的动作
	3)React Hooks 的生命周期是 帧 -> 帧

	图解：

	  Mount                                                 Unmount
	    ↓													   ↑
	Iteration                                              Iteration
	    |													   |
	    | -------               -------               -------  |
	    | |Frame|               |Frame|               |Frame|  |
	    → ------- → Iteration → ------- → Iteration → ------- →
		  |     |               |     |               |     |
		  -------               -------               -------

5.会触发迭代的集中情况
	1)组件的 props 改变
	2)组件的 state 改变
	3)组件的 context 改变

6.React Hooks API 分成几类
	1)状态类：useState() useReducer() useContext()
	2)缓存类：useMemo() useCallback()
	3)副作用类：useEffect() useLayoutEffect()
	4)Ref类：useRef() useImperativeHandle()

7.状态类 Hooks 函数
	将上一个帧的状态传递至下一帧。之前说过，每一个帧一旦固定了就不再改变。当使用状态类 Hooks 函数维持状态的时候，状态会“原封不动”传递到下一帧。

	触发迭代（Iteration），改变下一帧某一个状态。

8.状态类 Hooks 函数对生命周期的影响

	图解：

	-------------								 		-------------
	|   frame   |								  		|   frame   |
	-------------								  		-------------
	|   stateA -|------------ stay the same ------------|-> stateA  |
	|   stateB	|										|    newB	|
	-------------										-------------
		  ↓													  ↑
		  |													  |
		  |					  ------------					  |
		   ———— setStateB ————|	Iteation |————————————————————
							  ------------
9.缓存类 Hooks 函数
	1)跟上状态类 Hooks 函数类似，可以将一个值/函数（我们不把这个叫做状态）原封不动传递到下一帧。
	2)会在每一次迭代的时候根据依赖是否重新生成。

10.缓存类 Hooks 函数 优化了什么
	1)运算，useMemo
	2)渲染，对象“引用” {} !== {} , function(){} !== function(){}
	3)维持引用（骚操作）

	图解：

	-------------								 		-------------
	|   frame   |								  		|   frame   |
	-------------								  		-------------
	|   memoA  -|------------ stay the same ------------|-> memoA   |
	|   memoB	|										|   newB	|
	-------------										-------------
		  ↓													  ↑
		  |													  |
		  |					 -------------					  |
		   ——————————————————|	Iteation |——————依赖改变———————
							 -------------
11.React 总生命周期图

	  Mount                       ---------------------------
	    ↓					      |        Iteration      	|		                    Unmount
	Iteration                     |-------------------------|                              ↑
		|					      |	      					|	                       Iteration
	    |						  |    根据依赖执行effect		|                              |
		|					  →   |	last cleanup now effect |   → 		                   |
	    | ---------------  tigger |                       	| render  -------------------- |
	    | |    Frame    |     |   |    recalculate Memo     |   |     |       Frame      | |
	    | ---------------	  |   |	                        |   |     -------------------- |
		→ | state/memo  | ——— ↑   |     update state       	|   → ——— |  new state/memo  | →
		  | other state |         |                         |     	  | other state/memo |
		  --------------          |     other......         |         --------------------
				↓			      ---------------------------					↑
				|																|
				———————————————————————— stay the same ——————————————————————————

12.最后一些经验
	1)因为一个帧一旦固定，无法发生改变，所以在 React Hooks 函数组件顶层全部只能用 const。如果需要用到 let 的时候，你可能需要的是缓存类 Hooks。
	2)当你使用 React Hooks 时发现某一个值明明已经设置了但没有改变的时候，你需要检查这个值是不是忘记更新到当前帧了。
