//什么是虚拟 DOM
本质上是 JavaScript 对象，这个对象就是更加轻量级的对 DOM 的描述。

对，就是这么简单！

就是一个复杂一点的对象而已，没什么好说的，重点是为什么要有这个东西，以及有了这个描述有什么好处操守要介绍的内容。

//为什么要有虚拟 DOM

	//字符串拼接时代 - 2004

	在 2004 年这个时候，大家都还在用 PHP 的字符串拼接来开发网站：

	$str = '<ul>';
	foreach ($talks as $talk) {
	  $str += '<li>' . $talk->name . '</li>';
	}
	$str += '</ul>';
	这种方式代码写出来不好看不说，还容易造成 XSS 等安全问题。

	应对方法是对用户的任何输入都进行转义（Escape）。但是如果对字符串进行多次转义，那么反转义的次数也必须是相同的，否则会无法得到原内容。如果又不小心把 HTML 标签（Markup）给转义了，那么 HTML 标签会直接显示给用户，从而导致很差的用户体验。

	//XHP 时代 - 2010

	到了 2010 年，为了更加高效的编码，同时也避免转义 HTML 标签的错误，Facebook 开发了 XHP 。XHP 是对 PHP 的语法拓展，它允许开发者直接在 PHP 中使用 HTML 标签，而不再使用字符串。

	$content = <ul />;
	foreach ($talks as $talk) {
	  $content->appendChild(<li>{$talk->name}</li>);
	}
	这样的话，所有的 HTML 标签都使用不同于 PHP 的语法，我们可以轻易的分辨哪些需要转义哪些不需要转义。

	不久的后来，Facebook 的工程师又发现他们还可以创建自定义标签，而且通过组合自定义标签有助于构建大型应用。

	//JSX - 2013

	到了 2013 年，前端工程师 Jordan Walke 向他的经理提出了一个大胆的想法：把 XHP 的拓展功能迁移到 JS 中。首要任务是需要一个拓展来让 JS 支持 XML 语法，该拓展称为 JSX。因为当时由于 Node.js 在 Facebook 已经有很多实践，所以很快就实现了 JSX。

	可以猜想一下为什么要迁移到 js 中，我猜想应该是前后端分离导致的。

	const content = (
	  <TalkList>
		{ talks.map(talk => <Talk talk={talk} />)}
	  </TalkList>
	);

	//React

	在这个时候，就有另外一个很棘手的问题，那就是在进行更新的时候，需要去操作 DOM，传统 DOM API 细节太多，操作复杂，所以就很容易出现 Bug，而且代码难以维护。

	然后就想到了 PHP 时代的更新机制，每当有数据改变时，只需要跳到一个由 PHP 全新渲染的新页面即可。

	从开发者的角度来看的话，这种方式开发应用是非常简单的，因为它不需要担心变更，且界面上用户数据改变时所有内容都是同步的。

	为此 React 提出了一个新的思想，即始终整体“刷新”页面

	当发生前后状态变化时，React 会自动更新 UI，让我们从复杂的 UI 操作中解放出来，使我们只需关于状态以及最终 UI 长什么样。



