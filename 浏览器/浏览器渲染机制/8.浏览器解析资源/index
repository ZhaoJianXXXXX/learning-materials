当浏览器接收到服务器响应的资源后，会对资源进行解析。

首先，查看Response Header,根据响应头的指示做不同的事情，比如重定向，存储cookie，解压gzip，缓存资源等等。
接下来获取MIME类型（查看响应头的 Content-Type的值），根据不同的资源类型采用不同的解析方式

整体来说：
1.HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。
2.DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。
3.节点信息计算(重排)，这个过程被叫做Layout(Webkit)或者Reflow(Mozilla)。即根据渲染树计算每个节点的几何信息。
4.渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面。

一般来说从地址栏输入地址后，绝大多是情况下响应的都是 html文件，
那么就说以说页面是如何渲染html页面的，html页面中一般也会嵌入css，js，图片等资源。
因此如果解析到这些资源的时候，会再次向目标服务器发起请求，那么又会经历从解析url地址开始的各个步骤。


1.html页面的加载
  首先要知道浏览器解析是从上往下一行一行地解析的。

  解码：传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如UTF-8）转换成字符串，
    也就是HTML代码

  预解析：预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，
    比如img标签的src属性，并将这个请求加到请求队列中。

  符号化：符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。
    它通过一个状态机去识别符号的状态，比如遇到<，>状态都会产生变化。
    
  构建树：在上一步符号化中，解析器获得这些标记，然后以合适的方法创建DOM对象并把这些符号插入到DOM对象中。

2.css解析
  - 浏览器读取HTML文件时，如果在中引用了CSS文件，则会同时下载该CSS文件。
  浏览器在下载CSS文件后，会对其进行解析。解析规则包括删除多余空格、注释以及根据文件中定义的选择器和属性，构造出规则列表等。
	
  样式计算：
	- 当浏览器解析完CSS文件后，就会将样式应用到相应的HTML元素上。
    这个过程中，选定的元素按照规则列表进行样式计算，得出已应用的样式列表。

	布局：
	- 完成样式计算之后，浏览器就会根据已经计算好的样式列表进行布局。
    在这个步骤中，浏览器会确定元素在屏幕中应该如何排列，并计算出每个元素的精确位置和大小等。

	绘制：
	- 布局完成之后，浏览器就可以开始绘制了。
    在这一步骤当中，浏览器根据已经计算好的位置，尺寸和样式属性将各个元素绘制到屏幕上。
    
	重绘：
	- 当元素的位置或样式属性发生变化时，浏览器就需要重新绘制这些元素。
    这个过程称为重绘，它会涉及到一些优化，如页面只会重绘发生变化的部分等。

3.javaScript编译执行（参见js执行顺序.png）
  主要是三个阶段
  - 词法分析：js脚本加载完毕后，会首先进入语法分析阶段，
      它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。
  - 预编译：js有三种运行环境分别是 全局环境，函数环境，eval。
      每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。
  - 执行： js虽然是单线程的，但是实际参与工作的线程一共有四个：
    JS引擎线程（主），事件触发线程，定时器触发线程，HTTP异步请求线程

4.CSS和js在浏览器的一个解析顺序和相互影响（阻塞）

	DOM渲染对应GUI线程，js运行对应JS线程。两者互斥，不能同时运行。
	
	css的加载不会阻塞DOM的解析
	css的加载会阻塞DOM的渲染
	js的加载和执行会阻塞DOM的解析
	js的加载和执行会阻塞DOM的渲染
	css的加载会阻塞js的执行，不会阻塞js的加载
	css的加载与js的加载之间是否有影响？不考虑，浏览器自身会偷看并预先下载
	遇到script标签会触发渲染，以获得最新样式给js代码
	CSS不会阻塞DOM解析，但是会阻塞DOM渲染，严谨一点则是CSS会阻塞render tree的生成，进而会阻塞DOM的渲染
	浏览器遇到<script>标签且没有defer或async属性时会触发页面渲染
	Body内部的外链CSS较为特殊，会形成FOUC现象，请慎用



